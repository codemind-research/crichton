buildscript {
    ext {
        springBootVersion = '3.0.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java-library'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceSets.main.java.srcDirs = []
sourceSets{
    main{
        java{
            srcDir "src/main/java"
        }
    }
}

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'org.crichton.ServerApplication'
        attributes 'GIT_HASH': 'git describe --long --abbrev=8'.execute().text.trim()
    }
    jar.enabled = true
}

task buildServer(type: Copy, dependsOn: build) {
    def destinationDir = file(System.getProperty("user.home") + "/.crichton")
    from "$buildDir/libs/server-${version}.jar"
    into destinationDir
    rename("server-${version}.jar", "server.jar")
}


dependencies {
    // 프로젝트 의존성
    implementation project(':plugins:runner')

    // Spring Boot 의존성
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok (코드 생성을 위한 어노테이션 라이브러리)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MapStruct (DTO와 엔티티 간 매핑을 위한 라이브러리)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0' // Lombok과 MapStruct 호환을 위해 추가

    // 데이터베이스 및 JPA
    implementation 'org.postgresql:postgresql:42.5.1' // PostgreSQL 드라이버
    implementation group: 'org.hibernate', name: 'hibernate', version: '3.5.4-Final', ext: 'pom'

    // API 문서화 도구
    implementation ('io.springfox:springfox-boot-starter:3.0.0') {
        exclude group: 'io.swagger.core.v3'
    }
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // 테스트 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // 파일 및 압축 관련 유틸리티
    implementation group: 'org.zeroturnaround', name: 'zt-zip', version: '1.14' // zt-zip for ZIP file handling
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.9.1' // Zip4j for advanced ZIP handling

    // 기타 유틸리티 라이브러리
    implementation group: 'org.scala-lang', name: 'scala3-library_3', version: '3.1.0' // Scala 라이브러리
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0' // Apache Commons Lang
    implementation 'org.junit.jupiter:junit-jupiter-api' // JUnit for Testing
    implementation group: 'org.zeroturnaround', name: 'zt-exec', version: '1.12' // zt-exec for process handling
    implementation group: 'commons-io', name: 'commons-io', version: '2.5' // Apache Commons IO
}




//JUnitTest
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed" // Test Result
    }

}
