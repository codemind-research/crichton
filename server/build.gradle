buildscript {
    ext {
        springBootVersion = '3.0.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java-library'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// Default는 dev 로 지정
ext {
    profile = project.hasProperty('profile') ?
            profile :
            (System.hasProperty("spring.profiles.active") ? System.getProperty("spring.profiles.active") : "dev")
}

sourceSets.main.java.srcDirs = []
sourceSets{
    main{
        java{
            srcDir "src/main/java"
        }
        resources {
            srcDirs "src/main/resources", "src/main/resources-${profile}"
        }
    }
}

repositories {
    mavenCentral()
}

// processResources 작업을 수정하여 특정 파일 제외
processResources {
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
}

jar {
    manifest {
        attributes 'Main-Class': 'org.crichton.ServerApplication'
        attributes 'GIT_HASH': 'git describe --long --abbrev=8'.execute().text.trim()
    }
    jar.enabled = true
}

task copyJar(type: Copy, dependsOn: build) {
    def destinationDir = file(System.getProperty("user.dir") + "/build/dist/bin")

    from "$buildDir/libs/server-${version}.jar"
    into destinationDir
    rename("server-${version}.jar", "server.jar")

}

task copyProperteis(dependsOn: build) {
    def destinationDir = file(System.getProperty("user.dir") + "/build/dist/config")
    def mergedPropertiesFile = new File(destinationDir, "crichton.properties")

    doLast {

        copy {
            // 경로 확인 출력
            println "Destination directory: ${destinationDir.absolutePath}"


            // 파일 및 폴더 생성 예외 처리
            try {
                // 필요한 디렉터리 생성
                if (!destinationDir.exists()) {
                    destinationDir.mkdirs()
                    println "Created destination directory: ${destinationDir.absolutePath}"
                }

                def baseProperties = new Properties()
                def profileProperties = new Properties()

                // 빌드된 application.properties 파일 로드
                def basePropertiesFile = file("$buildDir/resources/main/application.properties")
                if (basePropertiesFile.exists()) {
                    basePropertiesFile.withInputStream { stream ->
                        baseProperties.load(stream)
                        // 특정 키 삭제
                        baseProperties.remove("spring.profiles.active")
                    }
                } else {
                    throw new GradleException("Base properties file not found: ${basePropertiesFile}")
                }

                // 빌드된 application-${profile}.properties 파일 로드
                def profilePropertiesFile = file("$buildDir/resources/main/application-${profile}.properties")
                if (profilePropertiesFile.exists()) {
                    profilePropertiesFile.withInputStream { stream ->
                        profileProperties.load(stream)
                        // 특정 키 삭제
                        profileProperties.remove("spring.config.activate.on-profile")
                    }
                } else {
                    println "Profile-specific properties file not found: ${profilePropertiesFile}, skipping profile properties."
                }



                // 기본 설정에 프로파일 설정을 덮어씀
                baseProperties.putAll(profileProperties)

                // 알파벳 순으로 정렬된 키들로 그룹화
                def sortedKeys = baseProperties.keySet().sort()
                def groupedProperties = ["server": [:], "logging": [:], "spring": [:], "crichton": [:]]

                // 키 분류
                sortedKeys.each { key ->
                    def matchedGroup = groupedProperties.find { key.startsWith(it.key) }?.key
                    if (matchedGroup) {
                        groupedProperties[matchedGroup][key] = baseProperties[key]
                    } else {
                        groupedProperties[key] = [(key): baseProperties[key]]
                    }
                }

                // 파일에 작성
                mergedPropertiesFile.withWriter { writer ->
                    groupedProperties.each { group, props ->
                        writer.write("\n# ${group.toUpperCase()}\n")
                        props.each { key, value ->
                            writer.write("$key=$value\n")
                        }
                    }
                }

                println "Merged properties file created at ${mergedPropertiesFile.absolutePath} without 'spring.config.activate.on-profile'"
            } catch (Exception e) {
                throw new GradleException("Failed to create merged properties file: ${e.message}", e)
            }
        }
    }
}

task copyLogbackConfig(type: Copy, dependsOn: build) {
    def destinationDir = file(System.getProperty("user.dir") + "/build/dist/config")
    from "$buildDir/resources/main/logback-spring.xml"
    into destinationDir
    rename("logback-spring.xml", "logback-config.xml")
}

// 설정 파일들 복사 테스크
task copyConfig(dependsOn: [copyProperteis, copyLogbackConfig])

// 배포를 위한 테스크
task prepareDeploymentServer (dependsOn: [copyJar, copyConfig]) {
    doLast {
        println "Server build completed with merged configuration file excluding 'spring.config.activate.on-profile'."
    }
}




dependencies {
    // 프로젝트 의존성
    implementation project(':plugins:runner')

    // Spring Boot 의존성
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Bean Validation API와 Hibernate Validator
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2' // Jakarta EL 추가

    // Lombok (코드 생성을 위한 어노테이션 라이브러리)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MapStruct (DTO와 엔티티 간 매핑을 위한 라이브러리)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0' // Lombok과 MapStruct 호환을 위해 추가

//    // 데이터베이스 및 JPA
//    implementation 'org.postgresql:postgresql:42.5.1' // PostgreSQL 드라이버
//    implementation group: 'org.hibernate', name: 'hibernate', version: '3.5.4-Final', ext: 'pom'

    // API 문서화 도구
    implementation ('io.springfox:springfox-boot-starter:3.0.0') {
        exclude group: 'io.swagger.core.v3'
    }
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // 테스트 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'

    // 파일 및 압축 관련 유틸리티
    implementation group: 'org.zeroturnaround', name: 'zt-zip', version: '1.14' // zt-zip for ZIP file handling
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.5' // Zip4j for advanced ZIP handling

    // 기타 유틸리티 라이브러리
    implementation group: 'org.scala-lang', name: 'scala3-library_3', version: '3.1.0' // Scala 라이브러리
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0' // Apache Commons Lang
    implementation 'org.junit.jupiter:junit-jupiter-api' // JUnit for Testing
    implementation group: 'org.zeroturnaround', name: 'zt-exec', version: '1.12' // zt-exec for process handling
    implementation group: 'commons-io', name: 'commons-io', version: '2.13.0' // Apache Commons IO
    implementation 'org.apache.tika:tika-core:2.9.2'    // Apache Tika

    implementation group: 'com.github.oshi', name: 'oshi-core', version: '6.6.5'

}




//JUnitTest
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed" // Test Result
    }

}

// Append Java Compile Options
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}
